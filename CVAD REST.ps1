#requires -version 3

<#
.SYNOPSIS
	Example script using Citrix CVAD REST API

.DESCRIPTION
    Use the API documented at https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis for accessing Citrix Cloud CVAD

.PARAMETER customerId
    Citrix Cloud customer id to query. customer id is shown in the Cloud management portal in the "API Access" tab of "Identity and Access Management" menu

.PARAMETER clientId
    Client id generated by creating a Secure Client on the "API Access" tab of "Identity and Access Management" menu

.PARAMETER secret
    Secret generated by creating a Secure Client on the "API Access" tab of "Identity and Access Management" menu

.EXAMPLE
    & '.\CVAD REST.ps1' -customerId yourcloudcustomerid -clientId 'f111319a-57df-4ebc-b9e4-fafe6196c88b' -secret 'QZXVERYSECRETQYXZ==' -Verbose

    Connect to the Citrix Cloud REST API with customer id "yourcloudcustomerid" and the clientid and secret previously created from a Secure Client instance in the Cloud console
    and show the number of delivery groups and machine catalogs

.NOTES
    This is a demonstration script only. If I were to write a production script for CVAD API, I would not allow passing of clientId and secret in clear text on the command line (see Get-Credential)

    Modification History:
        @guyrleech   03/11/2020  Initial release
#>

[CmdletBinding()]

Param
(
    [Parameter(Mandatory,HelpMessage='Citrix Cloud customer id')]
    [string]$customerId ,
    [Parameter(Mandatory,HelpMessage='API Client Id')]
    [string]$clientId ,
    [Parameter(Mandatory,HelpMessage='API Client secret')]
    [string]$secret ,
    ## these should not need to be changed
    [string]$authURL = 'https://trust.citrixworkspacesapi.net' ,
    [string]$baseURL = 'https://api-us.cloud.com/cvadapis'
)

#region Main

##https://stackoverflow.com/questions/41897114/unexpected-error-occurred-running-a-simple-unauthorized-rest-query?rq=1
Add-Type -TypeDefinition @'
public class SSLHandler
{
    public static System.Net.Security.RemoteCertificateValidationCallback GetSSLHandler()
    {
        return new System.Net.Security.RemoteCertificateValidationCallback((sender, certificate, chain, policyErrors) => { return true; });
    }
}
'@

[System.Net.ServicePointManager]::ServerCertificateValidationCallback = [SSLHandler]::GetSSLHandler()
[Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [System.Net.SecurityProtocolType]::Tls12
    
$sessionVariable = $null

[hashtable]$RESTparams = @{ 
    'ContentType' = 'application/json'
    'Method' = 'Post'
    'Verbose' = $false
}

## https://developer.cloud.com/getting-started/docs/overview
[hashtable]$authParams = @{ 
        ClientId = $clientId
        ClientSecret = $secret
}

$RESTparams.Body = ( $authParams | ConvertTo-Json ).ToString()
$RESTparams.Uri = $authURL + ( "/{0}/tokens/clients" -f $customerId )

try
{
    $authenticated = Invoke-RestMethod @RESTparams -SessionVariable sessionVariable
}
catch
{
    $authenticated = $null
    Throw "Failed to logon to $($RESTparams.uri) as customer $customerId : $_"
}

if( ! $authenticated -or ! $authenticated.PSObject.Properties[ 'token' ] )
{
    Throw "Failed to get authentication token from $($RESTparams.uri) as customer $customerId, got $authenticated"
}

Write-Verbose -Message "Authenticated ok, principal is $($authenticated.principal), session expires at $(Get-Date -Date ((Get-Date).AddSeconds( $authenticated.expiresIn )) -Format G)"

$RESTparams.websession = $sessionVariable
$RESTparams.Remove( 'Body' )

## https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis/docs/how-to-get-site-id
$RESTparams.Uri = $baseURL + '/me'
$RESTparams.Method = 'GET'
$RESTparams.Headers = @{ 'Authorization' = "CwsAuth Bearer $($authenticated.token)" ; 'Accept' = 'application/json' ; 'Content-Type' = 'application/json' ; 'Citrix-CustomerId' = $customerId }

try
{
    $sites = Invoke-RestMethod @RESTparams
}
catch
{
    $sites = $null
    Throw "Failed to get $($RESTparams.uri) : $_"
}

Write-Verbose -Message "Got $($sites.Customers.Count) sites for `"$($sites.DisplayName)`""

ForEach( $site in $sites.Customers.Sites )
{
    ## https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis/docs/how-to-get-machine-catalogs
    Write-Verbose -Message "Querying machine catalogs for site $($site.Id)"

    $RESTparams.Uri = $baseURL + ( "/{0}/MachineCatalogs" -f $site.Id )
    try
    {
        $machineCatalogs = Invoke-RestMethod @RESTparams
    }
    catch
    {
        $machineCatalogs = $null
        Write-Error "Failed to get machine catalogs via $($RESTparams.uri) : $_"
    }

    if( $machineCatalogs -and $machineCatalogs.PSObject.Properties[ 'items' ] -and $machineCatalogs.Items.Count )
    {
        Write-Verbose -Message "Got $($machineCatalogs.Items.Count) machine catalogs"
    }

    ## https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis/docs/how-to-get-delivery-groups
    Write-Verbose -Message "Querying delivery groups for site $($site.Id)"

    $RESTparams.Uri = $baseURL + ( "/{0}/DeliveryGroups" -f $site.Id )
    try
    {
        $deliveryGroups = Invoke-RestMethod @RESTparams
    }
    catch
    {
        $deliveryGroups = $null
        Write-Error "Failed to get delivery groups via $($RESTparams.uri) : $_"
    }

    if( $deliveryGroups -and $deliveryGroups.PSObject.Properties[ 'items' ] -and $deliveryGroups.Items.Count )
    {
        Write-Verbose -Message "Got $($deliveryGroups.Items.Count) delivery groups"
    }
}

#endregion main

# SIG # Begin signature block
# MIINRQYJKoZIhvcNAQcCoIINNjCCDTICAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUQNTb+6BjgKkGdHEWM2Iz8A37
# ihKgggqHMIIFMDCCBBigAwIBAgIQBAkYG1/Vu2Z1U0O1b5VQCDANBgkqhkiG9w0B
# AQsFADBlMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYD
# VQQLExB3d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVk
# IElEIFJvb3QgQ0EwHhcNMTMxMDIyMTIwMDAwWhcNMjgxMDIyMTIwMDAwWjByMQsw
# CQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cu
# ZGlnaWNlcnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFzc3VyZWQgSUQg
# Q29kZSBTaWduaW5nIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
# +NOzHH8OEa9ndwfTCzFJGc/Q+0WZsTrbRPV/5aid2zLXcep2nQUut4/6kkPApfmJ
# 1DcZ17aq8JyGpdglrA55KDp+6dFn08b7KSfH03sjlOSRI5aQd4L5oYQjZhJUM1B0
# sSgmuyRpwsJS8hRniolF1C2ho+mILCCVrhxKhwjfDPXiTWAYvqrEsq5wMWYzcT6s
# cKKrzn/pfMuSoeU7MRzP6vIK5Fe7SrXpdOYr/mzLfnQ5Ng2Q7+S1TqSp6moKq4Tz
# rGdOtcT3jNEgJSPrCGQ+UpbB8g8S9MWOD8Gi6CxR93O8vYWxYoNzQYIH5DiLanMg
# 0A9kczyen6Yzqf0Z3yWT0QIDAQABo4IBzTCCAckwEgYDVR0TAQH/BAgwBgEB/wIB
# ADAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwMweQYIKwYBBQUH
# AQEEbTBrMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wQwYI
# KwYBBQUHMAKGN2h0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFz
# c3VyZWRJRFJvb3RDQS5jcnQwgYEGA1UdHwR6MHgwOqA4oDaGNGh0dHA6Ly9jcmw0
# LmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJvb3RDQS5jcmwwOqA4oDaG
# NGh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJvb3RD
# QS5jcmwwTwYDVR0gBEgwRjA4BgpghkgBhv1sAAIEMCowKAYIKwYBBQUHAgEWHGh0
# dHBzOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwCgYIYIZIAYb9bAMwHQYDVR0OBBYE
# FFrEuXsqCqOl6nEDwGD5LfZldQ5YMB8GA1UdIwQYMBaAFEXroq/0ksuCMS1Ri6en
# IZ3zbcgPMA0GCSqGSIb3DQEBCwUAA4IBAQA+7A1aJLPzItEVyCx8JSl2qB1dHC06
# GsTvMGHXfgtg/cM9D8Svi/3vKt8gVTew4fbRknUPUbRupY5a4l4kgU4QpO4/cY5j
# DhNLrddfRHnzNhQGivecRk5c/5CxGwcOkRX7uq+1UcKNJK4kxscnKqEpKBo6cSgC
# PC6Ro8AlEeKcFEehemhor5unXCBc2XGxDI+7qPjFEmifz0DLQESlE/DmZAwlCEIy
# sjaKJAL+L3J+HNdJRZboWR3p+nRka7LrZkPas7CM1ekN3fYBIM6ZMWM9CBoYs4Gb
# T8aTEAb8B4H6i9r5gkn3Ym6hU/oSlBiFLpKR6mhsRDKyZqHnGKSaZFHvMIIFTzCC
# BDegAwIBAgIQBP3jqtvdtaueQfTZ1SF1TjANBgkqhkiG9w0BAQsFADByMQswCQYD
# VQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGln
# aWNlcnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFzc3VyZWQgSUQgQ29k
# ZSBTaWduaW5nIENBMB4XDTIwMDcyMDAwMDAwMFoXDTIzMDcyNTEyMDAwMFowgYsx
# CzAJBgNVBAYTAkdCMRIwEAYDVQQHEwlXYWtlZmllbGQxJjAkBgNVBAoTHVNlY3Vy
# ZSBQbGF0Zm9ybSBTb2x1dGlvbnMgTHRkMRgwFgYDVQQLEw9TY3JpcHRpbmdIZWF2
# ZW4xJjAkBgNVBAMTHVNlY3VyZSBQbGF0Zm9ybSBTb2x1dGlvbnMgTHRkMIIBIjAN
# BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr20nXdaAALva07XZykpRlijxfIPk
# TUQFAxQgXTW2G5Jc1YQfIYjIePC6oaD+3Zc2WN2Jrsc7bj5Qe5Nj4QHHHf3jopLy
# g8jXl7Emt1mlyzUrtygoQ1XpBBXnv70dvZibro6dXmK8/M37w5pEAj/69+AYM7IO
# Fz2CrTIrQjvwjELSOkZ2o+z+iqfax9Z1Tv82+yg9iDHnUxZWhaiEXk9BFRv9WYsz
# qTXQTEhv8fmUI2aZX48so4mJhNGu7Vp1TGeCik1G959Qk7sFh3yvRugjY0IIXBXu
# A+LRT00yjkgMe8XoDdaBoIn5y3ZrQ7bCVDjoTrcn/SqfHvhEEMj1a1f0zQIDAQAB
# o4IBxTCCAcEwHwYDVR0jBBgwFoAUWsS5eyoKo6XqcQPAYPkt9mV1DlgwHQYDVR0O
# BBYEFE16ovlqIk5uX2JQy6og0OCPrsnJMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUE
# DDAKBggrBgEFBQcDAzB3BgNVHR8EcDBuMDWgM6Axhi9odHRwOi8vY3JsMy5kaWdp
# Y2VydC5jb20vc2hhMi1hc3N1cmVkLWNzLWcxLmNybDA1oDOgMYYvaHR0cDovL2Ny
# bDQuZGlnaWNlcnQuY29tL3NoYTItYXNzdXJlZC1jcy1nMS5jcmwwTAYDVR0gBEUw
# QzA3BglghkgBhv1sAwEwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cuZGlnaWNl
# cnQuY29tL0NQUzAIBgZngQwBBAEwgYQGCCsGAQUFBwEBBHgwdjAkBggrBgEFBQcw
# AYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tME4GCCsGAQUFBzAChkJodHRwOi8v
# Y2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRTSEEyQXNzdXJlZElEQ29kZVNp
# Z25pbmdDQS5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAQEAU9zO
# 9UpTkPL8DNrcbIaf1w736CgWB5KRQsmp1mhXbGECUCCpOCzlYFCSeiwH9MT0je3W
# aYxWqIpUMvAI8ndFPVDp5RF+IJNifs+YuLBcSv1tilNY+kfa2OS20nFrbFfl9QbR
# 4oacz8sBhhOXrYeUOU4sTHSPQjd3lpyhhZGNd3COvc2csk55JG/h2hR2fK+m4p7z
# sszK+vfqEX9Ab/7gYMgSo65hhFMSWcvtNO325mAxHJYJ1k9XEUTmq828ZmfEeyMq
# K9FlN5ykYJMWp/vK8w4c6WXbYCBXWL43jnPyKT4tpiOjWOI6g18JMdUxCG41Hawp
# hH44QHzE1NPeC+1UjTGCAigwggIkAgEBMIGGMHIxCzAJBgNVBAYTAlVTMRUwEwYD
# VQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xMTAv
# BgNVBAMTKERpZ2lDZXJ0IFNIQTIgQXNzdXJlZCBJRCBDb2RlIFNpZ25pbmcgQ0EC
# EAT946rb3bWrnkH02dUhdU4wCQYFKw4DAhoFAKB4MBgGCisGAQQBgjcCAQwxCjAI
# oAKAAKECgAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIB
# CzEOMAwGCisGAQQBgjcCARUwIwYJKoZIhvcNAQkEMRYEFHJ4piyQzOkd+6Cvcgme
# tmF03/aOMA0GCSqGSIb3DQEBAQUABIIBAEbSE87BZjUpY2caltPohUeLHGtquUCK
# D2hF72DIpogyYCTVGufgnolyKlHqQJDz5E6X0K8+3/wbqgJ21Z1QDVeXvaSlDmZP
# rTTb/+Sa8qkcmqHW6QunVGQunxR7Espq1Og3QcOrjioDZCaM3osJYe7Yrni6xqPA
# SFA6SDCBJTMKVx0BaQ2aE2nYnxa6HJ55KXZZoZchvs58ks/0583dOGTEMGpjTx4G
# ZensmO4eZvBjSFeTgNowqtyaY4uwRfCpqwOys1iCwURjjiCTGRzAtvrlRxm1Cls9
# GO9OA5ReTcgFWvFGXT9eJGZih/kaead3019zQtjij3LIpo67iehX6Yk=
# SIG # End signature block
